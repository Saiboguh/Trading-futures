import random
import pandas as pd
import time
import numpy as np
import datetime as dt
import plotly
from binance.client import Client
import talib
import logging
from decimal import Decimal
from decimal import *

#module making for the logger
logging.basicConfig(filename='null', format='%(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

#Create a file handler
handler = logging.FileHandler('logfile.log')
handler.setLevel(logging.INFO)

#Create a logging format
title = logging.Formatter('%(message)s')
handler.setFormatter(title)

#Add the handlers to the logger
logger.addHandler(handler)


#Api and client setup
api_key = 'api_key'
api_secret = 'api_key'

#stochasticRSI funtion
def Stoch(close, high, low, smoothk, smoothd, n):
    lowestlow = pd.Series.rolling(low, window=n, center=False).min()
    highesthigh = pd.Series.rolling(high, window=n, center=False).max()
    K = pd.Series.rolling(100*((close-lowestlow)/(highesthigh-lowestlow)), window=smoothk).mean()
    D = pd.Series.rolling(K, window=smoothd).mean()
    return K, D

#Actual logging
logger.info("Date                    Close         RSI           %K             %D")
info = logging.Formatter('%(asctime)s %(message)s','%Y-%m-%d %H:%M:%S')
handler.setFormatter(info)
logger.addHandler(handler)


#def adjust_leverage(symbol, client):
    #client.futures_change_leverage(symbol=symbol, leverage=3)

#def adjust_margintype(symbol, client):
    #client.futures_change_margintype(symbol=symbol, marginType='ISOLATED')
bought = 0
#Main program
while True:
    client = Client(api_key, api_secret)

    #core definitions
    def buying_power():
        total_balance = client.futures_account_balance()
        values_of_currency = [a_dict['balance'] for a_dict in total_balance]
        total_buying_currency = values_of_currency[1]
        return total_buying_currency
    
    def projected_buy_quantity():
        buy_quantity = round(float((buying_power_assigned/newestcandleclosenum)*0.25), 4)
        if buy_quantity < 0.001:
            buy_quantity = 0.001
            return buy_quantity
    
    def buyorder(symbol, types, price, quantity, TimeInForce):
        #adjust_leverage = client.futures_change_leverage(symbol=symbol, leverage=leverage)
        #adjust_margin = client.futures_change_margin_type(symbol=symbol, marginType=marginType)
        adjust_buy = client.futures_create_order(symbol=symbol, quantity=quantity, type=types, side='BUY', price=price, TimeInForce=TimeInForce)
        return adjust_buy

    def sellorder(symbol, types, stopPrice):
        adjust_sell = client.futures_create_order(symbol=symbol, type=types, side='SELL', stopPrice=stopPrice, closePosition=True)
        return adjust_sell

    #Binance data in pandaframes
    candles = client.get_klines(symbol='BTCUSDT', interval=Client.KLINE_INTERVAL_2HOUR)
    df = pd.DataFrame(candles)
    df.columns=['timestart','open','high','low','close','?','timeend','?','?','?','?','?']
    df.timestart = [dt.datetime.fromtimestamp(i/1000) for i in df.timestart.values]
    df.timeend = [dt.datetime.fromtimestamp(i/1000) for i in df.timeend.values]

    #Compute RSI after getting Data
    float_data = [float(x) for x in df.close.values]
    np_float_data = np.array(float_data)
    rsi = talib.RSI(np_float_data, 14)
    df['rsi'] = rsi

    #compute stochrsi
    MyStochRSI = Stoch(df.rsi, df.rsi, df.rsi, 3, 3, 14)
    df['MyStochRSIK'], df['MyStochRSID'] = MyStochRSI

    #getting latest values for logging
    newestcandlestart = df.timestart.astype(str).iloc[-1]
    newestcandleend = df.timestart.astype(str).iloc[-1]
    newestcandleclose = df.close.iloc[-1]
    newestcandleRSI = df.rsi.astype(str).iloc[-1]
    newestcandleK = df.MyStochRSIK.astype(str).iloc[-1]
    newestcandleD = df.MyStochRSID.astype(str).iloc[-1]

    #getting latest values for order
    newestcandleKnum = df.MyStochRSIK.iloc[-1]
    newestcandleDnum = df.MyStochRSID.iloc[-1]
    newestcandleclosenum = round(float(newestcandleclose), 2)
    buying_power_assigned = round(float(buying_power()), 8)
    real_buy_quantity = projected_buy_quantity()


    #Filling log (str)
    t = dt.datetime.utcnow()
    sleeptime = (t.second)
    if sleeptime ==0 or sleeptime ==30:
        logger.info(newestcandleclose + " " + newestcandleRSI + " " + newestcandleK + " " + newestcandleD)
        time.sleep(28)
    
    
    if newestcandleKnum > newestcandleDnum and newestcandleKnum < 20.0 and newestcandleDnum < 20.0 and bought == 0:
        bought += 1
        real_buyorder = buyorder('BTCUSDT', 'LIMIT', newestcandleclosenum, real_buy_quantity, 'GTC')
    elif newestcandleKnum < newestcandleDnum and newestcandleKnum > 80.0 and newestcandleDnum > 80.0 and bought == 1:
        bought -= 1
        real_sellorder = sellorder('BTCUSDT', 'TAKE_PROFIT_MARKET', newestcandleclosenum)
    #print(newestcandleclosenum)
    #print(total_buying_power_assigned)
    #print(type(buy_quantity))
